 //7、个人思路  //1.判断x是不是负数
        //正数,压入栈中，再输出
        //是负数，先取出符号位，再翻转
        //纠正:1.使用栈太麻烦，可以数学运算解决。2.需要考虑溢出问题
class Solution {
    public int reverse(int x) {
        int res=0;
        while(x!=0){
            int tmp=x%10;//取余
            //判断是否大于最大32位数
            if(res>214748364||(res==214748364&&tmp>7)){
                return 0;
            }
            //判断是否小于最小
            if(res<-214748364||(res==-214748364&&tmp<-8)){
                return 0;
            }
            res=res*10+tmp;//先取出的最末位一直在乘10
            x/=10;
        }
        return res;
    }
}
//9、个人思路：中序遍历二叉树，比较左子节点的值与当前节点的值
//纠正：
class Solution {
    long pre=Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root){
        //空的可以
        if(root==null){
            return true;
        }
        //左子树
        if(!isValidBST(root.left)){
            return false;
        }
        //当前节点：重点
        if(root.val <= pre){
            return false;
        }
        pre=root.val;
        //右子树
        return isValidBST(root.right);
    }
}
